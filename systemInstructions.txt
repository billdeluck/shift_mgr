Okay, let's create a comprehensive "System Instructions" document for your Shift Management System project. This document will serve as a guide for setting up, running, testing, and understanding the system. It's designed for developers who might be new to the project.

# Shift Management System - System Instructions

## Table of Contents

1.  [Introduction](#introduction)
2.  [System Architecture](#system-architecture)
3.  [Prerequisites](#prerequisites)
4.  [Project Setup](#project-setup)
    *   [Clone the Repository](#clone-the-repository)
    *   [Install Dependencies](#install-dependencies)
5.  [Running the System](#running-the-system)
    *   [Environment Variables](#environment-variables)
    *   [Starting the Services](#starting-the-services)
6.  [API Endpoints](#api-endpoints)
    *   [Authentication Service](#authentication-service-endpoints)
    *   [User Service](#user-service-endpoints)
    *   [Shift Service](#shift-service-endpoints)
    *   [Notification Service](#notification-service-endpoints)
    *   [Event Service](#event-service-endpoints)
    *   [Report Service](#report-service-endpoints)
7.  [Testing](#testing)
    *   [Manual Testing (Postman)](#manual-testing-postman)
    *   [Automated Testing (Jest/Supertest)](#automated-testing-jestsupertest)
8.  [Data Persistence](#data-persistence)
9.  [Error Handling](#error-handling)
10. [Security Considerations](#security-considerations)
11. [Development Workflow](#development-workflow)
12. [Deployment (Future)](#deployment-future)
13. [Troubleshooting](#troubleshooting)
14. [Utility Script](#utility-script)
## 1. Introduction

This document provides instructions for setting up and running the Shift Management System, a microservices-based application built with Node.js, Express, and JSON file storage.  The system allows for managing employee shifts, user accounts, and generating reports.

## 2. System Architecture

The system is composed of six microservices:

*   **authentication-service:** Handles user registration, login, and JWT (JSON Web Token) generation/validation.  Manages user authentication data.
*   **user-service:** Manages user profile information (name, role, etc.).
*   **shift-service:** Manages shift scheduling and assignment.
*   **notification-service:** Sends email notifications (using Nodemailer).
*   **event-service:** Records significant events within the system (e.g., shift creation, user updates).
*   **report-service:** Generates reports (PDF, CSV, JSON) based on data from other services.

These services communicate with each other via HTTP requests (using `node-fetch`).  Each service has its own local data storage using a `data.json` file.

## 3. Prerequisites

*   **Node.js (v18 or higher):**  [https://nodejs.org/](https://nodejs.org/)
*   **npm (Node Package Manager):**  Comes with Node.js.
*   **GitHub Codespaces (Recommended):** This project is designed to be run within a GitHub Codespace.
*   **Postman:** For API testing. [https://www.postman.com/](https://www.postman.com/)
*   **Git:** For version control.

## 4. Project Setup

### 4.1 Clone the Repository

```bash
git clone <your_repository_url>
cd shift-management-system
content_copy
download
Use code with caution.
Markdown

Replace <your_repository_url> with the actual URL of your Git repository.

4.2 Install Dependencies

Within each microservice directory (e.g., authentication-service, user-service), run:

npm install
content_copy
download
Use code with caution.
Bash

This will install the necessary Node.js packages listed in the package.json file for each service.

5. Running the System
5.1 Environment Variables

Each service requires a .env file in its root directory to store configuration settings. Create these .env files and populate them with the necessary values. Do not commit .env files to version control.

Example .env files (replace placeholders):

authentication-service/.env:

PORT=3001
JWT_SECRET=your_super_secure_secret_key  # A long, random string
USER_SERVICE_URL=http://localhost:3002   # Will change in Codespaces
content_copy
download
Use code with caution.

user-service/.env:

PORT=3002
JWT_SECRET=your_super_secure_secret_key  # MUST match authentication-service
AUTH_SERVICE_URL=http://localhost:3001    # Will change in Codespaces
content_copy
download
Use code with caution.

shift-service/.env:

PORT=3004
JWT_SECRET=your_super_secure_secret_key
content_copy
download
Use code with caution.

notification-service/.env:

PORT=3005
JWT_SECRET=your_super_secure_secret_key
EMAIL_USER=your_email@gmail.com  # Your Gmail address for sending emails
EMAIL_PASS=your_app_password       # Google App Password (or less secure app password)
content_copy
download
Use code with caution.

event-service/.env:

PORT=3006
JWT_SECRET=your_super_secure_secret_key
content_copy
download
Use code with caution.

report-service/.env:

PORT=3007
JWT_SECRET=your_super_secure_secret_key
EVENT_SERVICE_URL=http://localhost:3006  # Will change in Codespaces
USER_SERVICE_URL=http://localhost:3002    # Will change in Codespaces
SHIFT_SERVICE_URL=http://localhost:3004    # Will change in Codespaces
content_copy
download
Use code with caution.

Important Notes on .env:

JWT_SECRET: This must be the same in all services that use JWT authentication (authentication-service, user-service, shift-service, event-service, report-service, notification-service).

Service URLs: In a Codespaces environment, the localhost part of the URLs will be replaced by the automatically generated Codespace URL (e.g., https://...-3001.app.github.dev).

Gmail Credentials: For the notification-service, use a dedicated Gmail account and generate an "App Password" in your Google Account security settings (if you have 2-Step Verification enabled). If you don't have 2FA enabled (not recommended), you'll need to enable "Less secure app access" in your Google Account settings.

5.2 Starting the Services

You must start each microservice in a separate terminal window/tab within your Codespace.

For each service (e.g., authentication-service, user-service, etc.):

Navigate to the service directory:

cd authentication-service  # Or user-service, shift-service, etc.
content_copy
download
Use code with caution.
Bash

Start the service:

npm start
content_copy
download
Use code with caution.
Bash

Or, if you want automatic restarts on code changes:

npm run dev
content_copy
download
Use code with caution.
Bash

Important: Start the services in this order (due to dependencies):

authentication-service

user-service

shift-service

notification-service

event-service

report-service

6. API Endpoints

This section lists the available API endpoints for each service.

(Replace placeholders like [Authentication Service Base URL] with the actual URLs for your running services.)

6.1 Authentication Service Endpoints
Method	Endpoint	Description	Request Body	Authentication
POST	/api/auth/register	Register a new user	{ fullName, email, password, role }	No
POST	/api/auth/login	Log in an existing user and get a JWT	{ email, password }	No
6.2 User Service Endpoints
Method	Endpoint	Description	Request Body	Authentication
GET	/api/users	Get all users	None	Yes (JWT)
GET	/api/users/:id	Get a user by ID	None	Yes (JWT)
POST	/api/users	Create user	{ id, fullName, email, password, role }	Yes (JWT)
PUT	/api/users/:id	Update a user's details	{ fullName, role } (Partial updates allowed)	Yes (JWT)
DELETE	/api/users/:id	Delete a user	None	Yes (JWT)
6.3 Shift Service Endpoints

Add endpoints similar to what you are using in Shift service

6.4 Notification Service Endpoints

Add endpoints similar to what you are using in Notification service

6.5 Event Service Endpoints
Method	Endpoint	Description	Request Body	Authentication
POST	/api/events	Create a new event	{ type, userId?, shiftId?, data? }	Yes (JWT)
GET	/api/events	Get all events	None	Yes (JWT)
GET	/api/events/:id	Get a specific event	None	Yes (JWT)
6.6 Report Service Endpoints
Method	Endpoint	Description	Request Body	Authentication
POST	/api/reports	Generate a report	{ reportType, startDate, endDate, userId?, format }	Yes (JWT)
GET	/api/reports	Get all reports		Yes (JWT)
GET	/api/reports/:id	Get a report by ID		Yes (JWT)
7. Testing
7.1 Manual Testing (Postman)

Use Postman to send requests to the API endpoints listed above. Make sure to:

Include the Authorization: Bearer <your_jwt_token> header for protected endpoints.

Provide valid request bodies in JSON format.

Test various scenarios, including success cases, error cases, and edge cases.

7.2 Automated Testing (Jest/Supertest)

Write unit and integration tests using Jest and Supertest to automate the testing process.

Create test files (e.g., *.test.js) in each service directory.

8. Data Persistence

Each service stores its data in a data.json file in its root directory. These files are not suitable for production use. For a production deployment, you would need to use a proper database (e.g., PostgreSQL, MySQL, MongoDB).

9. Error Handling

All services should handle errors gracefully.

Return appropriate HTTP status codes (4xx for client errors, 5xx for server errors).

Return user-friendly error messages (but never expose sensitive information).

Log errors to the console.

10. Security Considerations

JWT Secret: Keep your JWT_SECRET extremely secure. Never commit it to version control.

HTTPS: Use HTTPS in production to encrypt communication.

Input Validation: Validate all input data to prevent security vulnerabilities.

Authentication and Authorization: Enforce authentication and authorization for all protected endpoints.

Utility Script: The clean_data.py script is for development only. Do not include it in production.

11. Development Workflow

Clone the Repository: git clone <your_repository_url>

Create a Feature Branch: git checkout -b feature/my-new-feature

Make Changes: Implement your changes in the appropriate service(s).

Run Tests: npm test in the service directory.

Commit Changes: git commit -m "Add my new feature"

Push Changes: git push origin feature/my-new-feature

Create a Pull Request: Create a pull request on GitHub to merge your changes into the main branch.

Code Review: Have another developer review your code.

Merge: Once the pull request is approved, merge it into main.

12. Deployment (Future)

This project is currently designed for development within a GitHub Codespace. For a production deployment, you would need to:

Choose a hosting provider (e.g., AWS, Google Cloud, Heroku, DigitalOcean).

Containerize each service using Docker.

Use a database (e.g., PostgreSQL, MongoDB).

Set up HTTPS.

Configure a CI/CD pipeline.

13. Troubleshooting

TypeError: Only absolute URLs are supported: Make sure your service URLs in the .env files are complete and start with http:// or https://.

ReferenceError: getDb is not defined: Make sure you've imported getDb correctly in your controller files: import { getDb } from "../db.js";

401 Unauthorized: Make sure you're including a valid JWT in the Authorization header: Authorization: Bearer <your_jwt_token>

400 Bad Request: Check for validation errors. Make sure your request body is valid JSON and includes all required fields.

500 Internal Server Error: This indicates a server-side error. Check the console output in your Codespace terminal for error messages and stack traces.

14. Utility Script

Located in the main directory, the Utility script clean_data.py can be used to clear the databases.

python clear_data.py [directory] -s [service] -p [key_to_preserve] -b [key_to_block]
content_copy
download
Use code with caution.
Bash

[directory] (required): Path to the main directory
-s or --service (optional): Specific service to clear
-p or --preserve (optional, and deprecated): Key to preserve in JSON
-b or --block_list (optional): Comma-separated list of keys to prevent preservation
If -s not provided, every service is cleared.